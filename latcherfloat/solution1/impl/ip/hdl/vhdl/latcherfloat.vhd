-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity latcherfloat is
port (
    in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    latch_V : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_V_TVALID : IN STD_LOGIC;
    in_V_TREADY : OUT STD_LOGIC;
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of latcherfloat is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "latcherfloat,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z100ffv900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.096000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=37,HLS_SYN_LUT=63}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_in_V_TREADY : STD_LOGIC;
    signal Block_proc_U0_out_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_proc_U0_out_V_TVALID : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;

    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        latch_V : IN STD_LOGIC_VECTOR (0 downto 0);
        in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_V_TVALID : IN STD_LOGIC;
        in_V_TREADY : OUT STD_LOGIC;
        out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_V_TVALID : OUT STD_LOGIC;
        out_V_TREADY : IN STD_LOGIC );
    end component;



begin
    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        latch_V => latch_V,
        in_V_TDATA => in_V_TDATA,
        in_V_TVALID => in_V_TVALID,
        in_V_TREADY => Block_proc_U0_in_V_TREADY,
        out_V_TDATA => Block_proc_U0_out_V_TDATA,
        out_V_TVALID => Block_proc_U0_out_V_TVALID,
        out_V_TREADY => out_V_TREADY);




    Block_proc_U0_ap_continue <= ap_const_logic_1;
    Block_proc_U0_ap_start <= ap_const_logic_1;
    Block_proc_U0_start_full_n <= ap_const_logic_0;
    Block_proc_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    in_V_TREADY <= Block_proc_U0_in_V_TREADY;
    out_V_TDATA <= Block_proc_U0_out_V_TDATA;
    out_V_TVALID <= Block_proc_U0_out_V_TVALID;
end behav;
