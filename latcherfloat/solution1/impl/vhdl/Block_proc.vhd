-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Block_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    latch_V : IN STD_LOGIC_VECTOR (0 downto 0);
    in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_TVALID : IN STD_LOGIC;
    in_V_TREADY : OUT STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of Block_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tmp : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_V_TDATA_blk_n : STD_LOGIC;
    signal state_load_load_fu_73_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_1_nbreadreq_fu_59_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal tmp_1_nbwritereq_fu_44_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op16_read_state1 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_sig_ioackin_out_V_TREADY : STD_LOGIC;
    signal ap_predicate_op10_write_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal latch_V_read_read_fu_38_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_out_V_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_97 : BOOLEAN;
    signal ap_condition_65 : BOOLEAN;
    signal ap_condition_66 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_out_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_out_V_TREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_1 = ap_predicate_op10_write_state1))) then
                    if ((ap_condition_65 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_out_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_condition_97 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_out_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_condition_66 = ap_const_boolean_1)) then
                if (((ap_const_lv2_0 = state_load_load_fu_73_p1) and (ap_const_lv1_1 = latch_V_read_read_fu_38_p2))) then 
                    state <= ap_const_lv2_1;
                elsif ((ap_const_boolean_1 = ap_predicate_op16_read_state1)) then 
                    state <= ap_const_lv2_2;
                elsif ((ap_const_boolean_1 = ap_predicate_op10_write_state1)) then 
                    state <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_1 = ap_predicate_op16_read_state1) and not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io))))) then
                tmp <= in_V_TDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_V_TVALID, ap_predicate_op16_read_state1, ap_block_state1_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_V_TVALID, ap_predicate_op16_read_state1)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_io_assign_proc : process(ap_sig_ioackin_out_V_TREADY, ap_predicate_op10_write_state1)
    begin
                ap_block_state1_io <= ((ap_const_logic_0 = ap_sig_ioackin_out_V_TREADY) and (ap_const_boolean_1 = ap_predicate_op10_write_state1));
    end process;


    ap_condition_65_assign_proc : process(ap_start, ap_done_reg, in_V_TVALID, ap_predicate_op16_read_state1, ap_block_state1_io)
    begin
                ap_condition_65 <= not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io)));
    end process;


    ap_condition_66_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_TVALID, ap_predicate_op16_read_state1, ap_block_state1_io)
    begin
                ap_condition_66 <= ((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io))));
    end process;


    ap_condition_97_assign_proc : process(ap_start, ap_done_reg, in_V_TVALID, out_V_TREADY, ap_predicate_op16_read_state1)
    begin
                ap_condition_97 <= (not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = out_V_TREADY));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_TVALID, ap_predicate_op16_read_state1, ap_block_state1_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op10_write_state1_assign_proc : process(state, tmp_1_nbwritereq_fu_44_p3)
    begin
                ap_predicate_op10_write_state1 <= ((state = ap_const_lv2_2) and (ap_const_lv1_1 = tmp_1_nbwritereq_fu_44_p3));
    end process;


    ap_predicate_op16_read_state1_assign_proc : process(state, tmp_1_1_nbreadreq_fu_59_p3)
    begin
                ap_predicate_op16_read_state1 <= ((state = ap_const_lv2_1) and (tmp_1_1_nbreadreq_fu_59_p3 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_TVALID, ap_predicate_op16_read_state1, ap_block_state1_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_out_V_TREADY_assign_proc : process(out_V_TREADY, ap_reg_ioackin_out_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_out_V_TREADY)) then 
            ap_sig_ioackin_out_V_TREADY <= out_V_TREADY;
        else 
            ap_sig_ioackin_out_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    in_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, in_V_TVALID, state, tmp_1_1_nbreadreq_fu_59_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (state = ap_const_lv2_1) and (tmp_1_1_nbreadreq_fu_59_p3 = ap_const_lv1_1))) then 
            in_V_TDATA_blk_n <= in_V_TVALID;
        else 
            in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_TREADY_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_TVALID, ap_predicate_op16_read_state1, ap_block_state1_io)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_1 = ap_predicate_op16_read_state1) and not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state1_io))))) then 
            in_V_TREADY <= ap_const_logic_1;
        else 
            in_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    latch_V_read_read_fu_38_p2 <= latch_V;
    out_V_TDATA <= tmp;

    out_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, out_V_TREADY, state, tmp_1_nbwritereq_fu_44_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (state = ap_const_lv2_2) and (ap_const_lv1_1 = tmp_1_nbwritereq_fu_44_p3))) then 
            out_V_TDATA_blk_n <= out_V_TREADY;
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_TVALID_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_V_TVALID, ap_predicate_op16_read_state1, ap_predicate_op10_write_state1, ap_reg_ioackin_out_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_1 = ap_predicate_op10_write_state1) and not(((ap_const_logic_0 = ap_start) or ((ap_const_logic_0 = in_V_TVALID) and (ap_const_boolean_1 = ap_predicate_op16_read_state1)) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_0 = ap_reg_ioackin_out_V_TREADY))) then 
            out_V_TVALID <= ap_const_logic_1;
        else 
            out_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    state_load_load_fu_73_p1 <= state;
    tmp_1_1_nbreadreq_fu_59_p3 <= (0=>in_V_TVALID, others=>'-');
    tmp_1_nbwritereq_fu_44_p3 <= (0=>out_V_TREADY, others=>'-');
end behav;
