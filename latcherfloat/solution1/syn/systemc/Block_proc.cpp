// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Block_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Block_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Block_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> Block_proc::ap_ST_fsm_state1 = "1";
const sc_lv<32> Block_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Block_proc::ap_const_boolean_1 = true;
const sc_lv<2> Block_proc::ap_const_lv2_0 = "00";
const sc_lv<2> Block_proc::ap_const_lv2_1 = "1";
const sc_lv<1> Block_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Block_proc::ap_const_lv2_2 = "10";

Block_proc::Block_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( ap_sig_ioackin_out_V_TREADY );
    sensitive << ( ap_predicate_op10_write_state1 );

    SC_METHOD(thread_ap_condition_65);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_ap_condition_66);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_ap_condition_97);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_V_TVALID );
    sensitive << ( out_V_TREADY );
    sensitive << ( ap_predicate_op16_read_state1 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op10_write_state1);
    sensitive << ( state );
    sensitive << ( tmp_1_nbwritereq_fu_44_p3 );

    SC_METHOD(thread_ap_predicate_op16_read_state1);
    sensitive << ( state );
    sensitive << ( tmp_1_1_nbreadreq_fu_59_p3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_ap_sig_ioackin_out_V_TREADY);
    sensitive << ( out_V_TREADY );
    sensitive << ( ap_reg_ioackin_out_V_TREADY );

    SC_METHOD(thread_in_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( state );
    sensitive << ( tmp_1_1_nbreadreq_fu_59_p3 );

    SC_METHOD(thread_in_V_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_latch_V_read_read_fu_38_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( latch_V );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_out_V_TDATA);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( tmp );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_predicate_op10_write_state1 );

    SC_METHOD(thread_out_V_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_TREADY );
    sensitive << ( state );
    sensitive << ( tmp_1_nbwritereq_fu_44_p3 );

    SC_METHOD(thread_out_V_TVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_predicate_op10_write_state1 );
    sensitive << ( ap_reg_ioackin_out_V_TREADY );

    SC_METHOD(thread_state_load_load_fu_73_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( state );

    SC_METHOD(thread_tmp_1_1_nbreadreq_fu_59_p3);
    sensitive << ( in_V_TVALID );

    SC_METHOD(thread_tmp_1_nbwritereq_fu_44_p3);
    sensitive << ( out_V_TREADY );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_TVALID );
    sensitive << ( ap_predicate_op16_read_state1 );
    sensitive << ( ap_block_state1_io );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    state = "00";
    tmp = "00000000000000000000000000000000";
    ap_reg_ioackin_out_V_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Block_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, latch_V, "(port)latch_V");
    sc_trace(mVcdFile, in_V_TDATA, "(port)in_V_TDATA");
    sc_trace(mVcdFile, in_V_TVALID, "(port)in_V_TVALID");
    sc_trace(mVcdFile, in_V_TREADY, "(port)in_V_TREADY");
    sc_trace(mVcdFile, out_V_TDATA, "(port)out_V_TDATA");
    sc_trace(mVcdFile, out_V_TVALID, "(port)out_V_TVALID");
    sc_trace(mVcdFile, out_V_TREADY, "(port)out_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, state, "state");
    sc_trace(mVcdFile, tmp, "tmp");
    sc_trace(mVcdFile, in_V_TDATA_blk_n, "in_V_TDATA_blk_n");
    sc_trace(mVcdFile, state_load_load_fu_73_p1, "state_load_load_fu_73_p1");
    sc_trace(mVcdFile, tmp_1_1_nbreadreq_fu_59_p3, "tmp_1_1_nbreadreq_fu_59_p3");
    sc_trace(mVcdFile, out_V_TDATA_blk_n, "out_V_TDATA_blk_n");
    sc_trace(mVcdFile, tmp_1_nbwritereq_fu_44_p3, "tmp_1_nbwritereq_fu_44_p3");
    sc_trace(mVcdFile, ap_predicate_op16_read_state1, "ap_predicate_op16_read_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_sig_ioackin_out_V_TREADY, "ap_sig_ioackin_out_V_TREADY");
    sc_trace(mVcdFile, ap_predicate_op10_write_state1, "ap_predicate_op10_write_state1");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, latch_V_read_read_fu_38_p2, "latch_V_read_read_fu_38_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_out_V_TREADY, "ap_reg_ioackin_out_V_TREADY");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_97, "ap_condition_97");
    sc_trace(mVcdFile, ap_condition_65, "ap_condition_65");
    sc_trace(mVcdFile, ap_condition_66, "ap_condition_66");
#endif

    }
}

Block_proc::~Block_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Block_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_out_V_TREADY = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_write_state1.read()))) {
            if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
                ap_reg_ioackin_out_V_TREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_condition_97.read(), ap_const_boolean_1)) {
                ap_reg_ioackin_out_V_TREADY = ap_const_logic_1;
            }
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_66.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,2,2>(ap_const_lv2_0, state_load_load_fu_73_p1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, latch_V_read_read_fu_38_p2.read()))) {
            state = ap_const_lv2_1;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) {
            state = ap_const_lv2_2;
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_write_state1.read())) {
            state = ap_const_lv2_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        tmp = in_V_TDATA.read();
    }
}

void Block_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Block_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Block_proc::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_out_V_TREADY.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_write_state1.read()));
}

void Block_proc::thread_ap_condition_65() {
    ap_condition_65 = !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read()));
}

void Block_proc::thread_ap_condition_66() {
    ap_condition_66 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())));
}

void Block_proc::thread_ap_condition_97() {
    ap_condition_97 = (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, out_V_TREADY.read()));
}

void Block_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Block_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Block_proc::thread_ap_predicate_op10_write_state1() {
    ap_predicate_op10_write_state1 = (esl_seteq<1,2,2>(state.read(), ap_const_lv2_2) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbwritereq_fu_44_p3.read()));
}

void Block_proc::thread_ap_predicate_op16_read_state1() {
    ap_predicate_op16_read_state1 = (esl_seteq<1,2,2>(state.read(), ap_const_lv2_1) && esl_seteq<1,1,1>(tmp_1_1_nbreadreq_fu_59_p3.read(), ap_const_lv1_1));
}

void Block_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Block_proc::thread_ap_sig_ioackin_out_V_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_V_TREADY.read())) {
        ap_sig_ioackin_out_V_TREADY = out_V_TREADY.read();
    } else {
        ap_sig_ioackin_out_V_TREADY = ap_const_logic_1;
    }
}

void Block_proc::thread_in_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,2,2>(state.read(), ap_const_lv2_1) && 
         esl_seteq<1,1,1>(tmp_1_1_nbreadreq_fu_59_p3.read(), ap_const_lv1_1))) {
        in_V_TDATA_blk_n = in_V_TVALID.read();
    } else {
        in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_in_V_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        in_V_TREADY = ap_const_logic_1;
    } else {
        in_V_TREADY = ap_const_logic_0;
    }
}

void Block_proc::thread_latch_V_read_read_fu_38_p2() {
    latch_V_read_read_fu_38_p2 = latch_V.read();
}

void Block_proc::thread_out_V_TDATA() {
    out_V_TDATA = tmp.read();
}

void Block_proc::thread_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,2,2>(state.read(), ap_const_lv2_2) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_1_nbwritereq_fu_44_p3.read()))) {
        out_V_TDATA_blk_n = out_V_TREADY.read();
    } else {
        out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void Block_proc::thread_out_V_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op10_write_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, in_V_TVALID.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op16_read_state1.read())) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_out_V_TREADY.read()))) {
        out_V_TVALID = ap_const_logic_1;
    } else {
        out_V_TVALID = ap_const_logic_0;
    }
}

void Block_proc::thread_state_load_load_fu_73_p1() {
    state_load_load_fu_73_p1 = state.read();
}

void Block_proc::thread_tmp_1_1_nbreadreq_fu_59_p3() {
    tmp_1_1_nbreadreq_fu_59_p3 =  (sc_lv<1>) (in_V_TVALID.read());
}

void Block_proc::thread_tmp_1_nbwritereq_fu_44_p3() {
    tmp_1_nbwritereq_fu_44_p3 =  (sc_lv<1>) (out_V_TREADY.read());
}

void Block_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

