// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_proc_HH_
#define _Block_proc_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Block_proc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<1> > latch_V;
    sc_in< sc_lv<32> > in_V_TDATA;
    sc_in< sc_logic > in_V_TVALID;
    sc_out< sc_logic > in_V_TREADY;
    sc_out< sc_lv<32> > out_V_TDATA;
    sc_out< sc_logic > out_V_TVALID;
    sc_in< sc_logic > out_V_TREADY;


    // Module declarations
    Block_proc(sc_module_name name);
    SC_HAS_PROCESS(Block_proc);

    ~Block_proc();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<2> > state;
    sc_signal< sc_lv<32> > tmp;
    sc_signal< sc_logic > in_V_TDATA_blk_n;
    sc_signal< sc_lv<2> > state_load_load_fu_73_p1;
    sc_signal< sc_lv<1> > tmp_1_1_nbreadreq_fu_59_p3;
    sc_signal< sc_logic > out_V_TDATA_blk_n;
    sc_signal< sc_lv<1> > tmp_1_nbwritereq_fu_44_p3;
    sc_signal< bool > ap_predicate_op16_read_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_sig_ioackin_out_V_TREADY;
    sc_signal< bool > ap_predicate_op10_write_state1;
    sc_signal< bool > ap_block_state1_io;
    sc_signal< sc_lv<1> > latch_V_read_read_fu_38_p2;
    sc_signal< sc_logic > ap_reg_ioackin_out_V_TREADY;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_condition_97;
    sc_signal< bool > ap_condition_65;
    sc_signal< bool > ap_condition_66;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_block_state1_io();
    void thread_ap_condition_65();
    void thread_ap_condition_66();
    void thread_ap_condition_97();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op10_write_state1();
    void thread_ap_predicate_op16_read_state1();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_out_V_TREADY();
    void thread_in_V_TDATA_blk_n();
    void thread_in_V_TREADY();
    void thread_latch_V_read_read_fu_38_p2();
    void thread_out_V_TDATA();
    void thread_out_V_TDATA_blk_n();
    void thread_out_V_TVALID();
    void thread_state_load_load_fu_73_p1();
    void thread_tmp_1_1_nbreadreq_fu_59_p3();
    void thread_tmp_1_nbwritereq_fu_44_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
